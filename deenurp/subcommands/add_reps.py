"""
Add all sequences in a sequence file whose tax_id intersects with a taxtable.
"""

import argparse
import csv

from sqlalchemy import create_engine
from taxtastic import taxonomy, ncbi

from .. import wrap
from Bio import SeqIO

def build_parser(p):
    p.add_argument('fasta_file', help="""Sequence file to augment reference
            package with""", metavar='fasta_file')
    p.add_argument('tax_map', help="""CSV file containing [seqid,tax_id] rows
            for fasta_file""", type=argparse.FileType('r'))
    p.add_argument('tax_db', help="""Taxonomy database as generated by `taxit
            new_database`""")
    p.add_argument('taxtable', help="""Output of `taxit taxtable`""", type=argparse.FileType('r'))
    p.add_argument('outfile', type=argparse.FileType('w'))

    p.add_argument('--rank', default='species', help="""Rank at which to search
            for representatives [default: %(default)s]""")
    p.add_argument('--header', help="""Tax map has a header [default:
            %(default)s]""", default=False, action='store_true')

def action(args):
    # Load all tax_ids
    with args.taxtable as fp:
        r = csv.DictReader(fp)
        tax_ids = frozenset(i['tax_id'] for i in r if i['rank'] == args.rank)

    with args.tax_map:
        tax_map = wrap.load_tax_maps([args.tax_map], args.header)

    tax = taxonomy.Taxonomy(create_engine('sqlite:///{0}'.format(args.tax_db)), ncbi.ranks)

    sequence_ids = set(k for k, v in tax_map.items()
            if v and tax.lineage(tax_id=v).get(args.rank) in tax_ids)

    # Fetch
    count = 0
    with args.outfile:
        for r in SeqIO.parse(args.fasta_file):
            if r.id in sequence_ids:
                args.outfile.write('{}\n{}\n'.format(r.description, r.seq))
                count += 1
    print 'selected', count, 'sequences'
